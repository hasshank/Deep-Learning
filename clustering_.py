# -*- coding: utf-8 -*-
"""Clustering .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uZuxjzIkXva6CnvCgPjS5RM3HDLEy15h
"""

!wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM4150nnn/GSM4150377/suppl/GSM4150377_sciPlex2_pData.txt.gz

!gzip -d



!wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM4150nnn/GSM4150377/suppl/GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix.gz

!gzip -d GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix.gz

!mv GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix matrix.matrix

!head matrix.matrix

ls

## %%MatrixMarket matrix coordinate real general
## %
## 32738 2700 2286884

## largest_value largest_value count

## %%MatrixMarket matrix coordinate real general
## %
## x y 60135001

!mv matrix.matrix matrix.txt

import numpy as np
data = np.loadtxt('matrix.txt', dtype=int)

data

np.amax(data, axis=0)

## %%MatrixMarket matrix coordinate real general
## %
## 58347 24262 60135001

# Sample list of text

Lines = ["%%MatrixMarket matrix coordinate real general\n", "%\n", "58347 24262 60135001\n"]

# Write the strings in the list to text file

with open('example.mtx', 'w') as writefile:
    for line in Lines:
        writefile.write(line)

cat example.mtx





!cat matrix.txt >> example.mtx

!head example.mtx

# adata = sc.read_mtx('example.mtx')

# adata

logreg!mkdir data

ls

!mv example.mtx matrix.mtx

ls

!mv matrix.mtx data/matrix.mtx

ls

cd data

ls

!wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM4150nnn/GSM4150377/suppl/GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt.gz

!wget ftp://ftp.ncbi.nlm.nih.gov/geo/samples/GSM4150nnn/GSM4150377/suppl/GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt.gz

!gzip -d GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt.gz

!gzip -d GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt.gz

!mv GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt genes.tsv

!mv GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt barcodes.tsv

ls

cd ..

ls

import numpy as np
import pandas as pd

pip install scanpy

import scanpy as sc

sc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)
sc.logging.print_header()
sc.settings.set_figure_params(dpi=80, facecolor='white')





adata = sc.read_10x_mtx(
    'data/',
    var_names='gene_symbols',                # use gene symbols for the variable names (variables-axis index)
    cache=True)

adata

# 24262 Ã— 58347
# cells x genes
# observations x variables

# the paper also says 58347 genes and 24262 cells, which means that we read the data correctly

sc.pl.highest_expr_genes(adata, n_top=20)

sc.pp.filter_cells(adata, min_genes=200)
sc.pp.filter_genes(adata, min_cells=3)

adata.var['mt'] = adata.var_names.str.startswith('MT-')  # annotate the group of mitochondrial genes as 'mt'
sc.pp.calculate_qc_metrics(adata, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)

sc.pl.violin(adata, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'],
             jitter=0.4, multi_panel=True)

sc.pl.scatter(adata, x='total_counts', y='pct_counts_mt')
sc.pl.scatter(adata, x='total_counts', y='n_genes_by_counts')

adata = adata[adata.obs.n_genes_by_counts < 2500, :]
adata = adata[adata.obs.pct_counts_mt < 5, :]





# scanpy apparently won't work for the dose dependant, use panda dataframe





sc.pp.normalize_total(adata, target_sum=1e4)

sc.pp.log1p(adata)

sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)

sc.pl.highly_variable_genes(adata)

adata.raw = adata

adata = adata[:, adata.var.highly_variable]

sc.pp.regress_out(adata, ['total_counts', 'pct_counts_mt'])

sc.pp.scale(adata, max_value=10)

sc.tl.pca(adata, svd_solver='arpack')

sc.pl.pca(adata, color='CST3')

sc.pl.pca_variance_ratio(adata, log=True)

!mkdir write

results_file = 'write/pbmc3k.h5ad'  # the file that will store the analysis results

adata.write(results_file)

adata



sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)

sc.tl.umap(adata)

sc.pl.umap(adata, color=['CST3', 'PPBP'])

sc.pl.umap(adata, color=['CST3'], use_raw=False)

pip install leidenalg

sc.tl.leiden(adata)

sc.pl.umap(adata, color=['leiden', 'CST3'])

adata.write(results_file)

sc.tl.rank_genes_groups(adata, 'leiden', method='t-test')
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

sc.settings.verbosity = 2  # reduce the verbosity

sc.tl.rank_genes_groups(adata, 'leiden', method='wilcoxon')
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

adata.write(results_file)

sc.tl.rank_genes_groups(adata, 'leiden', method='logreg')
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

marker_genes = ['IL7R', 'CD79A', 'MS4A1', 'CD8A', 'CD8B', 'LYZ', 'CD14',
                'LGALS3', 'S100A8', 'GNLY', 'NKG7', 'KLRB1',
                'FCGR3A', 'MS4A7', 'FCER1A', 'CST3', 'PPBP']

adata = sc.read(results_file)

pd.DataFrame(adata.uns['rank_genes_groups']['names']).head(5)

result = adata.uns['rank_genes_groups']
groups = result['names'].dtype.names
pd.DataFrame(
    {group + '_' + key[:1]: result[key][group]
    for group in groups for key in ['names', 'pvals']}).head(5)

sc.tl.rank_genes_groups(adata, 'leiden', groups=['0'], reference='1', method='wilcoxon')
sc.pl.rank_genes_groups(adata, groups=['0'], n_genes=20)

sc.pl.rank_genes_groups_violin(adata, groups='0', n_genes=8)

adata = sc.read(results_file)

sc.pl.rank_genes_groups_violin(adata, groups='0', n_genes=8)

sc.pl.violin(adata, ['CST3'], groupby='leiden')

new_cluster_names = [
    'CD4 T', 'CD14 Monocytes',
    'B', 'CD8 T',
    'NK', 'FCGR3A Monocytes',
    'Dendritic', 'Megakaryocytes']
adata.rename_categories('leiden', new_cluster_names)

sc.pl.umap(adata, color='leiden', legend_loc='on data', title='', frameon=False, save='.pdf')

sc.pl.dotplot(adata, marker_genes, groupby='leiden');

sc.pl.stacked_violin(adata, marker_genes, groupby='leiden', rotation=90);

adata

adata.write(results_file, compression='gzip')  # `compression='gzip'` saves disk space, but slows down writing and subsequent reading

adata.raw.to_adata().write('./write/pbmc3k_withoutX.h5ad')

